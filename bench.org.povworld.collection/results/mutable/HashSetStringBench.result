Initializing Benchmarking Framework...
Running on Linux 4.13.0-pf4amd
Max heap = 7486832640 System Benchmark = 0.78ns
Performing 40 benchmarking tasks..
[0]	StringHashSetBench(0).addExistingElement..........	5.53ns
[1]	StringHashSetBench(1).addExistingElement....!..........	12.1ns
[2]	StringHashSetBench(10).addExistingElement!............	6.36ns
[3]	StringHashSetBench(100).addExistingElement.........!..........	8.34ns
[4]	StringHashSetBench(1000).addExistingElement..........	7.32ns
[5]	StringHashSetBench(10000).addExistingElement!!.......!.............	10.4ns
[6]	StringHashSetBench(100000).addExistingElement...!.......!.!..!....!..............!..........!..........	16.6ns
[7]	StringHashSetBench(1000000).addExistingElement..!...........	50.6ns
[8]	StringHashSetBench(0).addNewElement**.*.*..*.*..	12.7ns
[9]	StringHashSetBench(1).addNewElement....*..*..	27.9ns
[10]	StringHashSetBench(10).addNewElement....*!..*....*!.*..!....*!*...*!*!*..*..*..*.!..*..*.*..*.*!.*.*.*.**.!.***.**************	10.9ns
[11]	StringHashSetBench(100).addNewElement.*.***.****.***********!******************************************!************	13.4ns
[12]	StringHashSetBench(1000).addNewElement**********	14.9ns
[13]	StringHashSetBench(10000).addNewElement*!**********	13.6ns
[14]	StringHashSetBench(100000).addNewElement*!**!******************************	23.0ns
[15]	StringHashSetBench(1000000).addNewElement...!...*.....*.....*.	61.6ns
[16]	StringHashSetBench(0).getContainedElement...........................	5.42ns
[17]	StringHashSetBench(1).getContainedElement..........	13.0ns
[18]	StringHashSetBench(10).getContainedElement..........	6.68ns
[19]	StringHashSetBench(100).getContainedElement..........	7.77ns
[20]	StringHashSetBench(1000).getContainedElement..........	9.78ns
[21]	StringHashSetBench(10000).getContainedElement.!..............................	8.96ns
[22]	StringHashSetBench(100000).getContainedElement...........	17.3ns
[23]	StringHashSetBench(1000000).getContainedElement.!...........	49.8ns
[24]	StringHashSetBench(0).getNotContainedKey......................	5.48ns
[25]	StringHashSetBench(1).getNotContainedKey..........	7.96ns
[26]	StringHashSetBench(10).getNotContainedKey............	4.49ns
[27]	StringHashSetBench(100).getNotContainedKey..........	4.17ns
[28]	StringHashSetBench(1000).getNotContainedKey....................	5.50ns
[29]	StringHashSetBench(10000).getNotContainedKey!..........	9.41ns
[30]	StringHashSetBench(100000).getNotContainedKey..!..........	19.0ns
[31]	StringHashSetBench(1000000).getNotContainedKey..!...........	45.9ns
[32]	StringHashSetBench(0).memory.....	0.00ns
[33]	StringHashSetBench(1).memory.....	176s
[34]	StringHashSetBench(10).memory.....	32.0s
[35]	StringHashSetBench(100).memory.....	14.4s
[36]	StringHashSetBench(1000).memory.....	10.4s
[37]	StringHashSetBench(10000).memory.....	16.4s
[38]	StringHashSetBench(100000).memory!....	13.1s
[39]	StringHashSetBench(1000000).memory!!...	10.5s
Success.
