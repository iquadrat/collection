Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 7484735488 System Benchmark = 0.88ns
Performing 56 benchmarking tasks..
[0]	PersistentTreeListBench(0).addAtEnd..........	4.20ns
[1]	PersistentTreeListBench(1).addAtEnd***********	13.7ns
[2]	PersistentTreeListBench(10).addAtEnd**********	54.9ns
[3]	PersistentTreeListBench(100).addAtEnd**********	83.8ns
[4]	PersistentTreeListBench(1000).addAtEnd**!**********	84.4ns
[5]	PersistentTreeListBench(10000).addAtEnd**********	111ns
[6]	PersistentTreeListBench(100000).addAtEnd**********	132ns
[7]	PersistentTreeListBench(1000000).addAtEnd!*****!**********	149ns
[8]	PersistentTreeListBench(0).addAtRandomIndex..........	4.48ns
[9]	PersistentTreeListBench(1).addAtRandomIndex**********	14.0ns
[10]	PersistentTreeListBench(10).addAtRandomIndex**********	51.9ns
[11]	PersistentTreeListBench(100).addAtRandomIndex**********	51.1ns
[12]	PersistentTreeListBench(1000).addAtRandomIndex****!**********	137ns
[13]	PersistentTreeListBench(10000).addAtRandomIndex**********	216ns
[14]	PersistentTreeListBench(100000).addAtRandomIndex!**********	347ns
[15]	PersistentTreeListBench(1000000).addAtRandomIndex!*****.****	620ns
[16]	PersistentTreeListBench(0).duplicate**********	13.7ns
[17]	PersistentTreeListBench(1).duplicate**********	19.9ns
[18]	PersistentTreeListBench(10).duplicate**********	35.6ns
[19]	PersistentTreeListBench(100).duplicate**********	62.6ns
[20]	PersistentTreeListBench(1000).duplicate**!**********	83.9ns
[21]	PersistentTreeListBench(10000).duplicate**********	145ns
[22]	PersistentTreeListBench(100000).duplicate**********	177ns
[23]	PersistentTreeListBench(1000000).duplicate!***.*.*.*.*.!*..*..*..*..	216ns
[24]	PersistentTreeListBench(0).getRandomIndex...........	4.53ns
[25]	PersistentTreeListBench(1).getRandomIndex..........	7.96ns
[26]	PersistentTreeListBench(10).getRandomIndex...........	6.15ns
[27]	PersistentTreeListBench(100).getRandomIndex..........	10.8ns
[28]	PersistentTreeListBench(1000).getRandomIndex!..........	35.5ns
[29]	PersistentTreeListBench(10000).getRandomIndex.!..........	92.8ns
[30]	PersistentTreeListBench(100000).getRandomIndex..........	146ns
[31]	PersistentTreeListBench(1000000).getRandomIndex!..........	305ns
[32]	PersistentTreeListBench(0).memory!....	96.0s
[33]	PersistentTreeListBench(1).memory!....	144s
[34]	PersistentTreeListBench(10).memory!....	43.2s
[35]	PersistentTreeListBench(100).memory!....	33.1s
[36]	PersistentTreeListBench(1000).memory!....	32.1s
[37]	PersistentTreeListBench(10000).memory!!...	32.0s
[38]	PersistentTreeListBench(100000).memory!!...	32.0s
[39]	PersistentTreeListBench(1000000).memory!!...	32.0s
[40]	PersistentTreeListBench(0).removeRandomIndex............	4.54ns
[41]	PersistentTreeListBench(1).removeRandomIndex..........	6.75ns
[42]	PersistentTreeListBench(10).removeRandomIndex....*...*.	32.0ns
[43]	PersistentTreeListBench(100).removeRandomIndex...*..*..*	54.7ns
[44]	PersistentTreeListBench(1000).removeRandomIndex....!..*...*...	138ns
[45]	PersistentTreeListBench(10000).removeRandomIndex....*....*	211ns
[46]	PersistentTreeListBench(100000).removeRandomIndex..!..*....*..	347ns
[47]	PersistentTreeListBench(1000000).removeRandomIndex!.*..*..*..	595ns
[48]	PersistentTreeListBench(0).setRandomIndex..........	4.49ns
[49]	PersistentTreeListBench(1).setRandomIndex..*.**.*.*	9.42ns
[50]	PersistentTreeListBench(10).setRandomIndex.*********	17.7ns
[51]	PersistentTreeListBench(100).setRandomIndex**********	34.7ns
[52]	PersistentTreeListBench(1000).setRandomIndex**!**********	81.4ns
[53]	PersistentTreeListBench(10000).setRandomIndex**********	154ns
[54]	PersistentTreeListBench(100000).setRandomIndex!***********	282ns
[55]	PersistentTreeListBench(1000000).setRandomIndex!*.**.*..*..	487ns
Success.


Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 7484735488 System Benchmark = 0.97ns
Performing 21 benchmarking tasks..
[0]	PersistentTreeListBench(1).addAtEnd**********	16.8ns
[1]	PersistentTreeListBench(100).addAtEnd************	87.7ns
[2]	PersistentTreeListBench(10000).addAtEnd**********	162ns
[3]	PersistentTreeListBench(1).addAtRandomIndex**********	14.7ns
[4]	PersistentTreeListBench(100).addAtRandomIndex*************	66.1ns
[5]	PersistentTreeListBench(10000).addAtRandomIndex**********	243ns
[6]	PersistentTreeListBench(1).duplicate**********	32.4ns
[7]	PersistentTreeListBench(100).duplicate**************	83.3ns
[8]	PersistentTreeListBench(10000).duplicate**************	115ns
[9]	PersistentTreeListBench(1).getRandomIndex..........	6.77ns
[10]	PersistentTreeListBench(100).getRandomIndex...........	6.41ns
[11]	PersistentTreeListBench(10000).getRandomIndex..........	83.6ns
[12]	PersistentTreeListBench(1).memory!....	144s
[13]	PersistentTreeListBench(100).memory!...!	33.1s
[14]	PersistentTreeListBench(10000).memory!!...	32.0s
[15]	PersistentTreeListBench(1).removeRandomIndex..........	7.04ns
[16]	PersistentTreeListBench(100).removeRandomIndex**********	56.8ns
[17]	PersistentTreeListBench(10000).removeRandomIndex**********	222ns
[18]	PersistentTreeListBench(1).setRandomIndex**********	9.90ns
[19]	PersistentTreeListBench(100).setRandomIndex**********	34.4ns
[20]	PersistentTreeListBench(10000).setRandomIndex**********	164ns
Success.

Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 7484735488 System Benchmark = 0.92ns
Performing 21 benchmarking tasks..
[0]	PersistentTreeListBench(1).addAtEnd*************	13.1ns
[1]	PersistentTreeListBench(100).addAtEnd**********	80.0ns
[2]	PersistentTreeListBench(10000).addAtEnd***********	114ns
[3]	PersistentTreeListBench(1).addAtRandomIndex**********	13.8ns
[4]	PersistentTreeListBench(100).addAtRandomIndex**********	51.9ns
[5]	PersistentTreeListBench(10000).addAtRandomIndex**********	216ns
[6]	PersistentTreeListBench(1).duplicate**********	29.8ns
[7]	PersistentTreeListBench(100).duplicate**********	81.9ns
[8]	PersistentTreeListBench(10000).duplicate**********	110ns
[9]	PersistentTreeListBench(1).getRandomIndex..........	6.11ns
[10]	PersistentTreeListBench(100).getRandomIndex...........	7.97ns
[11]	PersistentTreeListBench(10000).getRandomIndex..........	82.6ns
[12]	PersistentTreeListBench(1).memory!....	144s
[13]	PersistentTreeListBench(100).memory!....	33.1s
[14]	PersistentTreeListBench(10000).memory!!...	32.0s
[15]	PersistentTreeListBench(1).removeRandomIndex..........	6.17ns
[16]	PersistentTreeListBench(100).removeRandomIndex**********	55.1ns
[17]	PersistentTreeListBench(10000).removeRandomIndex**********	212ns
[18]	PersistentTreeListBench(1).setRandomIndex**********	9.67ns
[19]	PersistentTreeListBench(100).setRandomIndex**********	34.7ns
[20]	PersistentTreeListBench(10000).setRandomIndex**********	152ns
Success.
