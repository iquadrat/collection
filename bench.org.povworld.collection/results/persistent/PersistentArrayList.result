Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 7484735488 System Benchmark = 0.98ns
Performing 56 benchmarking tasks..
[0]	PersistentArrayListBench(0).addAtEnd..........	4.67ns
[1]	PersistentArrayListBench(1).addAtEnd**********	31.5ns
[2]	PersistentArrayListBench(10).addAtEnd**********	26.6ns
[3]	PersistentArrayListBench(100).addAtEnd**********	52.5ns
[4]	PersistentArrayListBench(1000).addAtEnd*!**********	57.1ns
[5]	PersistentArrayListBench(10000).addAtEnd**********	82.5ns
[6]	PersistentArrayListBench(100000).addAtEnd**********	117ns
[7]	PersistentArrayListBench(1000000).addAtEnd!*****.**.*.!***********	173ns
[8]	PersistentArrayListBench(0).addAtRandomIndex..........	4.69ns
[9]	PersistentArrayListBench(1).addAtRandomIndex.**.****.*	34.3ns
[10]	PersistentArrayListBench(10).addAtRandomIndex**********	30.5ns
[11]	PersistentArrayListBench(100).addAtRandomIndex**********	68.2ns
[12]	PersistentArrayListBench(1000).addAtRandomIndex***!**********	119ns
[13]	PersistentArrayListBench(10000).addAtRandomIndex**********	188ns
[14]	PersistentArrayListBench(100000).addAtRandomIndex!***********	286ns
[15]	PersistentArrayListBench(1000000).addAtRandomIndex!*.**.*.*.**.!**.***.***	412ns
[16]	PersistentArrayListBench(0).duplicate***********	39.6ns
[17]	PersistentArrayListBench(1).duplicate**********	53.7ns
[18]	PersistentArrayListBench(10).duplicate**********	31.0ns
[19]	PersistentArrayListBench(100).duplicate**********	40.9ns
[20]	PersistentArrayListBench(1000).duplicate*!!**********	61.1ns
[21]	PersistentArrayListBench(10000).duplicate**!!***********	98.5ns
[22]	PersistentArrayListBench(100000).duplicate**!!**********	124ns
[23]	PersistentArrayListBench(1000000).duplicate!*!*!.*.*.*.*.*	142ns
[24]	PersistentArrayListBench(0).getRandomIndex..........	5.60ns
[25]	PersistentArrayListBench(1).getRandomIndex..........	8.17ns
[26]	PersistentArrayListBench(10).getRandomIndex..........	1.49ns
[27]	PersistentArrayListBench(100).getRandomIndex..........	5.04ns
[28]	PersistentArrayListBench(1000).getRandomIndex..........	22.6ns
[29]	PersistentArrayListBench(10000).getRandomIndex..........	55.4ns
[30]	PersistentArrayListBench(100000).getRandomIndex.......!..........	82.7ns
[31]	PersistentArrayListBench(1000000).getRandomIndex......!..........	138ns
[32]	PersistentArrayListBench(0).memory!....	96.0s
[33]	PersistentArrayListBench(1).memory!....	160s
[34]	PersistentArrayListBench(10).memory!....	19.2s
[35]	PersistentArrayListBench(100).memory!....	7.04s
[36]	PersistentArrayListBench(1000).memory!....	5.50s
[37]	PersistentArrayListBench(10000).memory!!...	5.42s
[38]	PersistentArrayListBench(100000).memory!!!..	5.41s
[39]	PersistentArrayListBench(1000000).memory!!...	5.42s
[40]	PersistentArrayListBench(0).removeRandomIndex..........	4.72ns
[41]	PersistentArrayListBench(1).removeRandomIndex........*.	30.2ns
[42]	PersistentArrayListBench(10).removeRandomIndex...*..*..*	27.3ns
[43]	PersistentArrayListBench(100).removeRandomIndex.*.**.****	58.8ns
[44]	PersistentArrayListBench(1000).removeRandomIndex.*!**********	111ns
[45]	PersistentArrayListBench(10000).removeRandomIndex**********	183ns
[46]	PersistentArrayListBench(100000).removeRandomIndex!**********	275ns
[47]	PersistentArrayListBench(1000000).removeRandomIndex!.**.*.**.*	401ns
[48]	PersistentArrayListBench(0).setRandomIndex..........	4.72ns
[49]	PersistentArrayListBench(1).setRandomIndex...*..*..*	20.0ns
[50]	PersistentArrayListBench(10).setRandomIndex.***.*****	16.4ns
[51]	PersistentArrayListBench(100).setRandomIndex**********	36.1ns
[52]	PersistentArrayListBench(1000).setRandomIndex*!**********	66.6ns
[53]	PersistentArrayListBench(10000).setRandomIndex**********	117ns
[54]	PersistentArrayListBench(100000).setRandomIndex**********	238ns
[55]	PersistentArrayListBench(1000000).setRandomIndex!.*.*.*.*..*	327ns
Success.
