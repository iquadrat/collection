// with split @40
Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 4116709376 System Benchmark = 0.92ns
Performing 72 benchmarking tasks..
[0]	PersistentHashSetBench(0)._build****.******	16.0ns
[1]	PersistentHashSetBench(1)._build.*.**.**.*	75.5ns
[2]	PersistentHashSetBench(10)._build..*..*..*.	101ns
[3]	PersistentHashSetBench(100)._build..*.*..*.*	121ns
[4]	PersistentHashSetBench(1000)._build...*...*.!.*..*.*.*.*	176ns
[5]	PersistentHashSetBench(10000)._build..!!*.*.*.*.*.	242ns
[6]	PersistentHashSetBench(100000)._build.!.!.*.*.*.!**.*.*.*.*	248ns
[7]	PersistentHashSetBench(1000000)._build.!!**.***.**!***.**.***	361ns
[8]	PersistentHashSetBench(0).addAllMerge..........	4.81ns
[9]	PersistentHashSetBench(1).addAllMerge...*..*...	63.0ns
[10]	PersistentHashSetBench(10).addAllMerge.*.*.*.*.*	63.4ns
[11]	PersistentHashSetBench(100).addAllMerge.*.*.**.*.*	107ns
[12]	PersistentHashSetBench(1000).addAllMerge!.**!**.**.**.*	157ns
[13]	PersistentHashSetBench(10000).addAllMerge..*.*.*.*.	211ns
[14]	PersistentHashSetBench(100000).addAllMerge.!.*.**.*.*.*	312ns
[15]	PersistentHashSetBench(1000000).addAllMerge!**.***.***	458ns
[16]	PersistentHashSetBench(0).addAllSelf..........	4.54ns
[17]	PersistentHashSetBench(1).addAllSelf.**.**.*.*	47.3ns
[18]	PersistentHashSetBench(10).addAllSelf.....*....	15.1ns
[19]	PersistentHashSetBench(100).addAllSelf..........	21.0ns
[20]	PersistentHashSetBench(1000).addAllSelf..........	23.4ns
[21]	PersistentHashSetBench(10000).addAllSelf..........	33.6ns
[22]	PersistentHashSetBench(100000).addAllSelf..!.............	42.4ns
[23]	PersistentHashSetBench(1000000).addAllSelf......!..........	64.7ns
[24]	PersistentHashSetBench(0).addNewElement..........	4.51ns
[25]	PersistentHashSetBench(1).addNewElement...*...*..	54.1ns
[26]	PersistentHashSetBench(10).addNewElement..*.*.*.*.	60.9ns
[27]	PersistentHashSetBench(100).addNewElement.**.**.***	77.1ns
[28]	PersistentHashSetBench(1000).addNewElement.**!**.****.**	119ns
[29]	PersistentHashSetBench(10000).addNewElement..*.*.*.*.	225ns
[30]	PersistentHashSetBench(100000).addNewElement.!*.***.**.*	234ns
[31]	PersistentHashSetBench(1000000).addNewElement!*.***.***.*	374ns
[32]	PersistentHashSetBench(0).getContainedElement..........	4.58ns
[33]	PersistentHashSetBench(1).getContainedElement..........	15.4ns
[34]	PersistentHashSetBench(10).getContainedElement..........	12.3ns
[35]	PersistentHashSetBench(100).getContainedElement..........	13.8ns
[36]	PersistentHashSetBench(1000).getContainedElement..........	16.0ns
[37]	PersistentHashSetBench(10000).getContainedElement..........	29.8ns
[38]	PersistentHashSetBench(100000).getContainedElement...............................................	35.2ns
[39]	PersistentHashSetBench(1000000).getContainedElement......!..........	114ns
[40]	PersistentHashSetBench(0).getNotContainedKey..........	4.55ns
[41]	PersistentHashSetBench(1).getNotContainedKey..........	15.4ns
[42]	PersistentHashSetBench(10).getNotContainedKey...........	11.2ns
[43]	PersistentHashSetBench(100).getNotContainedKey..........	9.93ns
[44]	PersistentHashSetBench(1000).getNotContainedKey............	12.4ns
[45]	PersistentHashSetBench(10000).getNotContainedKey..........	28.8ns
[46]	PersistentHashSetBench(100000).getNotContainedKey.............	37.8ns
[47]	PersistentHashSetBench(1000000).getNotContainedKey......!............	91.2ns
[48]	PersistentHashSetBench(0).memory.....	20700s
[49]	PersistentHashSetBench(1).memory.....	200s
[50]	PersistentHashSetBench(10).memory.....	26.4s
[51]	PersistentHashSetBench(100).memory.....	12.5s
[52]	PersistentHashSetBench(1000).memory!.!!.	10.8s
[53]	PersistentHashSetBench(10000).memory!!...	10.9s
[54]	PersistentHashSetBench(100000).memory!!!.!	10.7s
[55]	PersistentHashSetBench(1000000).memory!!!!.	10.7s
[56]	PersistentHashSetBench(0).removeAllElement...........	4.48ns
[57]	PersistentHashSetBench(1).removeAllElement.*.**.**.*	49.7ns
[58]	PersistentHashSetBench(10).removeAllElement..*..*..*.	52.3ns
[59]	PersistentHashSetBench(100).removeAllElement...*...*..	117ns
[60]	PersistentHashSetBench(1000).removeAllElement...*.!!*..*..*..*	159ns
[61]	PersistentHashSetBench(10000).removeAllElement..*..*..*.	210ns
[62]	PersistentHashSetBench(100000).removeAllElement!*.*.*..*!.*.*.*..*.	234ns
[63]	PersistentHashSetBench(1000000).removeAllElement!!*.*.*.*.*.	268ns
[64]	PersistentHashSetBench(0).removeElement..........	4.65ns
[65]	PersistentHashSetBench(1).removeElement...........	18.4ns
[66]	PersistentHashSetBench(10).removeElement..*..*.*..	61.4ns
[67]	PersistentHashSetBench(100).removeElement.*.*.*.*.*	100ns
[68]	PersistentHashSetBench(1000).removeElement.*.*.!*.*.**.*.*	152ns
[69]	PersistentHashSetBench(10000).removeElement..*..*..*.	211ns
[70]	PersistentHashSetBench(100000).removeElement!.*.*.**.*.	273ns
[71]	PersistentHashSetBench(1000000).removeElement!*.***.**.*	441ns
Success.



Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 4116709376 System Benchmark = 0.88ns
Performing 48 benchmarking tasks..
[0]	PersistentHashSet3Bench(0).addAllMerge..........	4.76ns
[1]	PersistentHashSet3Bench(1).addAllMerge..*.*..*.*	66.5ns
[2]	PersistentHashSet3Bench(10).addAllMerge.*.*.*.*.*	63.1ns
[3]	PersistentHashSet3Bench(100).addAllMerge.*.**.**.*	91.9ns
[4]	PersistentHashSet3Bench(1000).addAllMerge.*.*.*.*.*	153ns
[5]	PersistentHashSet3Bench(10000).addAllMerge..*.*.*.*.	213ns
[6]	PersistentHashSet3Bench(100000).addAllMerge..*.*.*.*.	313ns
[7]	PersistentHashSet3Bench(1000000).addAllMerge.**.***.**	451ns
[8]	PersistentHashSet3Bench(0).addAllSelf..........	6.08ns
[9]	PersistentHashSet3Bench(1).addAllSelf.*.*.**.*.	49.0ns
[10]	PersistentHashSet3Bench(10).addAllSelf.......*..	23.1ns
[11]	PersistentHashSet3Bench(100).addAllSelf..........	27.5ns
[12]	PersistentHashSet3Bench(1000).addAllSelf..........	28.5ns
[13]	PersistentHashSet3Bench(10000).addAllSelf..........	36.6ns
[14]	PersistentHashSet3Bench(100000).addAllSelf..........	40.4ns
[15]	PersistentHashSet3Bench(1000000).addAllSelf..........	63.3ns
[16]	PersistentHashSet3Bench(0).addNewElement..........	4.18ns
[17]	PersistentHashSet3Bench(1).addNewElement...*...*..	58.3ns
[18]	PersistentHashSet3Bench(10).addNewElement.*.*.*.*.*	62.7ns
[19]	PersistentHashSet3Bench(100).addNewElement.***.***.*	81.1ns
[20]	PersistentHashSet3Bench(1000).addNewElement.*.*.**.*.	163ns
[21]	PersistentHashSet3Bench(10000).addNewElement.*.*.**.*.	173ns
[22]	PersistentHashSet3Bench(100000).addNewElement.*.*.*.*.*	236ns
[23]	PersistentHashSet3Bench(1000000).addNewElement.**.***.**	422ns
[24]	PersistentHashSet3Bench(0).getContainedElement..........	4.13ns
[25]	PersistentHashSet3Bench(1).getContainedElement..........	17.9ns
[26]	PersistentHashSet3Bench(10).getContainedElement..........	14.2ns
[27]	PersistentHashSet3Bench(100).getContainedElement...........	17.1ns
[28]	PersistentHashSet3Bench(1000).getContainedElement..........	18.1ns
[29]	PersistentHashSet3Bench(10000).getContainedElement..........	28.7ns
[30]	PersistentHashSet3Bench(100000).getContainedElement................	38.0ns
[31]	PersistentHashSet3Bench(1000000).getContainedElement..........	109ns
[32]	PersistentHashSet3Bench(0).getNotContainedKey..........	4.60ns
[33]	PersistentHashSet3Bench(1).getNotContainedKey..........	15.0ns
[34]	PersistentHashSet3Bench(10).getNotContainedKey..........	10.9ns
[35]	PersistentHashSet3Bench(100).getNotContainedKey..........	16.4ns
[36]	PersistentHashSet3Bench(1000).getNotContainedKey..........	19.0ns
[37]	PersistentHashSet3Bench(10000).getNotContainedKey..........	26.4ns
[38]	PersistentHashSet3Bench(100000).getNotContainedKey....................................................................................................	38.9ns
[39]	PersistentHashSet3Bench(1000000).getNotContainedKey..........	87.2ns
[40]	PersistentHashSet3Bench(0).memory.....	20900s
[41]	PersistentHashSet3Bench(1).memory.....	200s
[42]	PersistentHashSet3Bench(10).memory.....	26.4s
[43]	PersistentHashSet3Bench(100).memory!....	12.5s
[44]	PersistentHashSet3Bench(1000).memory.....	11.5s
[45]	PersistentHashSet3Bench(10000).memory.....	11.8s
[46]	PersistentHashSet3Bench(100000).memory.....	11.2s
[47]	PersistentHashSet3Bench(1000000).memory.....	11.3s
Success.





// with pertube and merging when < splitsize
Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 4116709376 System Benchmark = 0.86ns
Performing 48 benchmarking tasks..
[0]	PersistentHashSet3Bench(0)._emory.!...	80.0s
[1]	PersistentHashSet3Bench(1)._emory.!...	0.00ns
[2]	PersistentHashSet3Bench(10)._emory.....	0.00ns
[3]	PersistentHashSet3Bench(100)._emory!....	0.00ns
[4]	PersistentHashSet3Bench(1000)._emory...!.	904ms
[5]	PersistentHashSet3Bench(10000)._emory....!	9.69s
[6]	PersistentHashSet3Bench(100000)._emory!....	11.0s
[7]	PersistentHashSet3Bench(1000000)._emory!....	11.3s
[8]	PersistentHashSet3Bench(0).addAllMerge..........	9.92ns
[9]	PersistentHashSet3Bench(1).addAllMerge...*..*...	64.8ns
[10]	PersistentHashSet3Bench(10).addAllMerge.*.*.*.*.*.*	64.3ns
[11]	PersistentHashSet3Bench(100).addAllMerge.*.*.*.**.	104ns
[12]	PersistentHashSet3Bench(1000).addAllMerge.*.*.*.*.*	164ns
[13]	PersistentHashSet3Bench(10000).addAllMerge..*.*.*.*.	227ns
[14]	PersistentHashSet3Bench(100000).addAllMerge..*.*.*.*.	359ns
[15]	PersistentHashSet3Bench(1000000).addAllMerge.**.***.***	461ns
[16]	PersistentHashSet3Bench(0).addAllSelf..........	10.0ns
[17]	PersistentHashSet3Bench(1).addAllSelf.**.***.**	42.9ns
[18]	PersistentHashSet3Bench(10).addAllSelf.......*..	23.6ns
[19]	PersistentHashSet3Bench(100).addAllSelf..........	28.1ns
[20]	PersistentHashSet3Bench(1000).addAllSelf..........	29.5ns
[21]	PersistentHashSet3Bench(10000).addAllSelf..........	35.3ns
[22]	PersistentHashSet3Bench(100000).addAllSelf..........	36.0ns
[23]	PersistentHashSet3Bench(1000000).addAllSelf..........	49.3ns
[24]	PersistentHashSet3Bench(0).addNewElement..........	4.18ns
[25]	PersistentHashSet3Bench(1).addNewElement...*..*..*	59.6ns
[26]	PersistentHashSet3Bench(10).addNewElement.*.*.*.*.*	63.7ns
[27]	PersistentHashSet3Bench(100).addNewElement.**.***.**	85.8ns
[28]	PersistentHashSet3Bench(1000).addNewElement.*.*.*.*.*	161ns
[29]	PersistentHashSet3Bench(10000).addNewElement.*.*.*.**.	171ns
[30]	PersistentHashSet3Bench(100000).addNewElement.*.*.**.*.	262ns
[31]	PersistentHashSet3Bench(1000000).addNewElement.***.***.*	400ns
[32]	PersistentHashSet3Bench(0).getContainedElement..........	4.19ns
[33]	PersistentHashSet3Bench(1).getContainedElement..........	18.1ns
[34]	PersistentHashSet3Bench(10).getContainedElement..........	14.6ns
[35]	PersistentHashSet3Bench(100).getContainedElement..........	17.2ns
[36]	PersistentHashSet3Bench(1000).getContainedElement..........	18.1ns
[37]	PersistentHashSet3Bench(10000).getContainedElement..........	26.1ns
[38]	PersistentHashSet3Bench(100000).getContainedElement..........	37.1ns
[39]	PersistentHashSet3Bench(1000000).getContainedElement............	110ns
[40]	PersistentHashSet3Bench(0).getNotContainedKey..........	4.33ns
[41]	PersistentHashSet3Bench(1).getNotContainedKey..........	15.0ns
[42]	PersistentHashSet3Bench(10).getNotContainedKey..........	10.8ns
[43]	PersistentHashSet3Bench(100).getNotContainedKey..........	14.2ns
[44]	PersistentHashSet3Bench(1000).getNotContainedKey..........	17.8ns
[45]	PersistentHashSet3Bench(10000).getNotContainedKey..........	24.7ns
[46]	PersistentHashSet3Bench(100000).getNotContainedKey...............................	37.8ns
[47]	PersistentHashSet3Bench(1000000).getNotContainedKey...........	97.2ns
Success.

// pertube with split @40 and merge @32
Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 4116709376 System Benchmark = 0.85ns
Performing 48 benchmarking tasks..
[0]	PersistentHashSet3Bench(0)._emory.!...	80.0s
[1]	PersistentHashSet3Bench(1)._emory.!...	200s
[2]	PersistentHashSet3Bench(10)._emory.....	26.4s
[3]	PersistentHashSet3Bench(100)._emory!....	12.5s
[4]	PersistentHashSet3Bench(1000)._emory...!.	912ms
[5]	PersistentHashSet3Bench(10000)._emory..!..	10.7s
[6]	PersistentHashSet3Bench(100000)._emory!....	10.9s
[7]	PersistentHashSet3Bench(1000000)._emory!!...	10.7s
[8]	PersistentHashSet3Bench(0).addAllMerge..........	10.1ns
[9]	PersistentHashSet3Bench(1).addAllMerge..*..*..*.	66.1ns
[10]	PersistentHashSet3Bench(10).addAllMerge.*.*.*.*.*	64.6ns
[11]	PersistentHashSet3Bench(100).addAllMerge.*.**.**.*	104ns
[12]	PersistentHashSet3Bench(1000).addAllMerge.*.*.**.*.	157ns
[13]	PersistentHashSet3Bench(10000).addAllMerge.*.*.*.*.*	224ns
[14]	PersistentHashSet3Bench(100000).addAllMerge..*.*.*.*.	349ns
[15]	PersistentHashSet3Bench(1000000).addAllMerge.***.***.*	471ns
[16]	PersistentHashSet3Bench(0).addAllSelf..........	10.3ns
[17]	PersistentHashSet3Bench(1).addAllSelf.**.**.**.	47.4ns
[18]	PersistentHashSet3Bench(10).addAllSelf.......*..	24.1ns
[19]	PersistentHashSet3Bench(100).addAllSelf..........	28.5ns
[20]	PersistentHashSet3Bench(1000).addAllSelf..........	29.1ns
[21]	PersistentHashSet3Bench(10000).addAllSelf..........	37.7ns
[22]	PersistentHashSet3Bench(100000).addAllSelf..........	38.4ns
[23]	PersistentHashSet3Bench(1000000).addAllSelf..........	50.4ns
[24]	PersistentHashSet3Bench(0).addNewElement..........	4.19ns
[25]	PersistentHashSet3Bench(1).addNewElement...*..*..*	59.8ns
[26]	PersistentHashSet3Bench(10).addNewElement.*.*.*.*.*	65.9ns
[27]	PersistentHashSet3Bench(100).addNewElement.**.***.**	87.1ns
[28]	PersistentHashSet3Bench(1000).addNewElement.*.*.*.*.*	119ns
[29]	PersistentHashSet3Bench(10000).addNewElement..*.*.*.*.	231ns
[30]	PersistentHashSet3Bench(100000).addNewElement.*.*.**.*.	264ns
[31]	PersistentHashSet3Bench(1000000).addNewElement.***.***.*	388ns
[32]	PersistentHashSet3Bench(0).getContainedElement..........	4.18ns
[33]	PersistentHashSet3Bench(1).getContainedElement..........	17.9ns
[34]	PersistentHashSet3Bench(10).getContainedElement..........	14.4ns
[35]	PersistentHashSet3Bench(100).getContainedElement..........	17.4ns
[36]	PersistentHashSet3Bench(1000).getContainedElement...........	18.6ns
[37]	PersistentHashSet3Bench(10000).getContainedElement..........	27.2ns
[38]	PersistentHashSet3Bench(100000).getContainedElement..........	35.8ns
[39]	PersistentHashSet3Bench(1000000).getContainedElement.................	109ns
[40]	PersistentHashSet3Bench(0).getNotContainedKey..........	4.16ns
[41]	PersistentHashSet3Bench(1).getNotContainedKey..........	14.9ns
[42]	PersistentHashSet3Bench(10).getNotContainedKey..........	10.7ns
[43]	PersistentHashSet3Bench(100).getNotContainedKey..........	14.2ns
[44]	PersistentHashSet3Bench(1000).getNotContainedKey..........	19.6ns
[45]	PersistentHashSet3Bench(10000).getNotContainedKey...........	28.7ns
[46]	PersistentHashSet3Bench(100000).getNotContainedKey..........	42.1ns
[47]	PersistentHashSet3Bench(1000000).getNotContainedKey............	109ns
Success.
