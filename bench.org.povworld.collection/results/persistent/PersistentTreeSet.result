Initializing Benchmarking Framework...
Running on Linux 3.11.4-pf-i7
Max heap = 7484735488 System Benchmark = 0.86ns
Performing 56 benchmarking tasks..
[0]	PersistentTreeSetBench(0).addAllNewElement**********	7.04ns
[1]	PersistentTreeSetBench(1).addAllNewElement**********	78.6ns
[2]	PersistentTreeSetBench(10).addAllNewElement**********	113ns
[3]	PersistentTreeSetBench(100).addAllNewElement***********	186ns
[4]	PersistentTreeSetBench(1000).addAllNewElement***********	311ns
[5]	PersistentTreeSetBench(10000).addAllNewElement**********	427ns
[6]	PersistentTreeSetBench(100000).addAllNewElement***!**********	731ns
[7]	PersistentTreeSetBench(1000000).addAllNewElement!**********	1.17us
[8]	PersistentTreeSetBench(0).addNewElement..........	4.20ns
[9]	PersistentTreeSetBench(1).addNewElement.*****.***	57.8ns
[10]	PersistentTreeSetBench(10).addNewElement**********	107ns
[11]	PersistentTreeSetBench(100).addNewElement**********	152ns
[12]	PersistentTreeSetBench(1000).addNewElement**********	277ns
[13]	PersistentTreeSetBench(10000).addNewElement**********	432ns
[14]	PersistentTreeSetBench(100000).addNewElement***!**********	732ns
[15]	PersistentTreeSetBench(1000000).addNewElement!**********	1.19us
[16]	PersistentTreeSetBench(0).duplicate.............	5.08ns
[17]	PersistentTreeSetBench(1).duplicate**********	73.7ns
[18]	PersistentTreeSetBench(10).duplicate**********	88.3ns
[19]	PersistentTreeSetBench(100).duplicate**********	129ns
[20]	PersistentTreeSetBench(1000).duplicate**********	264ns
[21]	PersistentTreeSetBench(10000).duplicate**********	266ns
[22]	PersistentTreeSetBench(100000).duplicate!**********	336ns
[23]	PersistentTreeSetBench(1000000).duplicate!******.**.*.!*.*.*..*.*.	367ns
[24]	PersistentTreeSetBench(0).getContainedElement..........	4.24ns
[25]	PersistentTreeSetBench(1).getContainedElement...........	9.30ns
[26]	PersistentTreeSetBench(10).getContainedElement.............	11.4ns
[27]	PersistentTreeSetBench(100).getContainedElement..........	22.2ns
[28]	PersistentTreeSetBench(1000).getContainedElement...!..........	86.2ns
[29]	PersistentTreeSetBench(10000).getContainedElement.!..........	164ns
[30]	PersistentTreeSetBench(100000).getContainedElement.!..........	270ns
[31]	PersistentTreeSetBench(1000000).getContainedElement!..........	553ns
[32]	PersistentTreeSetBench(0).getNotContainedKey..........	4.16ns
[33]	PersistentTreeSetBench(1).getNotContainedKey..........	9.73ns
[34]	PersistentTreeSetBench(10).getNotContainedKey..........	13.6ns
[35]	PersistentTreeSetBench(100).getNotContainedKey...........	25.1ns
[36]	PersistentTreeSetBench(1000).getNotContainedKey....!...........	111ns
[37]	PersistentTreeSetBench(10000).getNotContainedKey..........	201ns
[38]	PersistentTreeSetBench(100000).getNotContainedKey..!...........	329ns
[39]	PersistentTreeSetBench(1000000).getNotContainedKey!..........	625ns
[40]	PersistentTreeSetBench(0).memory.....	136s
[41]	PersistentTreeSetBench(1).memory.....	176s
[42]	PersistentTreeSetBench(10).memory.....	46.4s
[43]	PersistentTreeSetBench(100).memory.....	33.4s
[44]	PersistentTreeSetBench(1000).memory!!...	32.1s
[45]	PersistentTreeSetBench(10000).memory!....	32.0s
[46]	PersistentTreeSetBench(100000).memory!!...	32.0s
[47]	PersistentTreeSetBench(1000000).memory!!...	32.0s
[48]	PersistentTreeSetBench(0).removeContainedElement...........	4.22ns
[49]	PersistentTreeSetBench(1).removeContainedElement....*...*...	49.7ns
[50]	PersistentTreeSetBench(10).removeContainedElement....*...*.	106ns
[51]	PersistentTreeSetBench(100).removeContainedElement....*..*..	137ns
[52]	PersistentTreeSetBench(1000).removeContainedElement....*...*.	283ns
[53]	PersistentTreeSetBench(10000).removeContainedElement....*....*	416ns
[54]	PersistentTreeSetBench(100000).removeContainedElement...!*....*...*	664ns
[55]	PersistentTreeSetBench(1000000).removeContainedElement!.*.**.****	1.04us
Success.
